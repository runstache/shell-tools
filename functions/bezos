function bezos {

    local awsaction=${1?:'Aws Action required'}


    # Available commands
    allowedcommands=("login" "bastion" "creds")

    # Check if the variable is in the list
    found=false
    for item in "${allowedcommands[@]}"; do
        if [[ "$awsaction" == "$item" ]]; then
            found=true
            break
        fi
    done

    # Check the command is in the list
    if $found; then;
        
    else
        echo "$awsaction is not a valid command"
        return
    fi

    if [[ $awsaction == 'login' ]]; then;         
        echo "Refreshing SSO Login..."
        aws sso login --profile $ACTIVE_PROFILE
        return

    fi

    if [[ $awsaction == 'bastion' ]]; then;
        bastionfile="${HOME}/bastion.json"
        bastioncommand=${2?:"Bastion subcommand is required as either a configuration name or list to view all available."}
        if [[ $bastioncommand == 'list' ]]; then;
            if [[ -f $bastionfile ]]; then;
                echo "Available Bastions"
                jq 'keys' $bastionfile
                return
            fi
            echo "Bastion Configuration Not Present"
            return
        fi

        
        echo "Connecting to Basion ${bastioncommand}"

        config=$(jq --arg key "$bastioncommand" '.[$key]' $bastionfile)
        stackname=$(echo $config | jq '.stackName')
        environment=$(echo $config | jq '.environment')
        sourceport=$(echo $config | jq '.sourcePort')
        destinationport=$(echo $config | jq '.destinationPort')
        remotehost=$(echo $config | jq '.host')
        profile=$(echo $config | jq '.profile')

        
        hostbastion=$(aws ec2 describe-instances \
            --filter Name=tag:aws:cloudformation:stack-name,Values=$stackname Name=tag:Environment,Values=$environment \
            --query 'Reservations[*].Instances[*].InstanceId' \
            --output text --profile $profile)
        
        aws ssm start-session --target $hostbastion \
        --document-name AWS-StartPortForwardingSessionToRemoteHost \
        --parameters host=$hostbastion,portNumber=$destinationport,localPortNumber=$sourceport \
        --profile $profile

        return
    fi

    if [[ $awsaction == 'creds' ]]; then;
        profile=${2?:"Profile is required"}
        creds=$(aws configure export-credentials --profile $profile)
        if [[ $creds =~ 'error' ]]; then;
            echo "Invalid or expired SSO session, attempting re-login"
            aws sso login --profile $ACTIVE_PROFILE
            creds=$(aws configure export-credentials --profile $profile)
            if [[ $creds =~ "error" ]]; then; 
                echo "Unable to refresh SSO session."
                return
            fi
            return
        fi
    
        aws_creds=$(aws configure export-credentials --profile $profile)
        access_key=$(echo $aws_creds | jq '.AccessKeyId')
        secret_key=$(echo $aws_creds | jq '.SecretAccessKey')
        token=$(echo $aws_creds | jq '.SessionToken')
        expiration=$(echo $aws_creds | jq '.Expiration')

        content=$(cat $GIT_HUB_HOME/shell-tools/templates/creds.template)
        content=${content//'#access_key'/$access_key}
        content=${content//'#secret_key'/$secret_key}
        content=${content//'#token'/$token}
        content=${content//'#expiration'/$expiration}
        content=${content//'#aws_profile'/$profile}

        # Output the Temp Credentials Page and Remove it.
        echo $content > $HOME/temp.html
        open $HOME/temp.html
        sleep 2
        rm $HOME/temp.html

        return
    fi
}

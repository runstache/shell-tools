function mamba (){

    local pipaction=${1?:"Pip Action is required"}
    local pyversion="$2"


    if [[ $pipaction == 'lint' ]]; then;
        uvx ruff format
        uvx ruff check --fix
        return

    fi

    if [[ $pipaction == 'rm' ]]; then;
        echo 'Removing Virtual Environment'

        if [[ ${VIRTUAL_ENV} ]]; then;
            deactivate
        fi

        if [[ -d './.venv/' ]]; then;
            rm -r .venv
        else;
            echo 'Virtual Environment not found.'
        fi
        return
    fi

    if [[ $pipaction == 'activate' ]]; then;
        echo 'Activating Environment'
        source ./.venv/bin/activate
        return
    fi

    if [[ $pipaction == 'sca' ]]; then;
        echo "Running Static Code Analysis"

        if [[ ! ${VIRTUAL_ENV} ]]; then;
            source ./.venv/bin/activate
        fi

        echo 'Running MyPy...'
        uv run --locked mypy .

        echo 'Executing Ruff Checks'
        uvx ruff check
        return
    fi

    if [[ $pipaction == 'coverage' ]]; then;
        echo 'Running Code Coverage'

        if [[ ! ${VIRTUAL_ENV} ]]; then;
            source ./.venv/bin/activate
        fi

        uv run --locked pytest --cov-report html --cov
        open ./htmlcov/index.html
        return

    fi

    if [[ $pipaction == 'install' || $pipaction == 'sync' ]]; then;

        if [[ $pyversion == 'sca' ]]; then;
            echo 'Adding Static Code tools'

            if [[ ! ${VIRTUAL_ENV} ]]; then;
                source ./.venv/bin/activate
            fi
            uv add --active --dev mypy pytest assertpy pytest-cov
            return
        fi

        if [[ $pyversion == 'hooks' ]]; then;
            echo 'Adding Python Git Hooks'
            if [[ -d './.git/hooks' ]]; then;
                cp -r $GIT_HUB_HOME/shell-tools/hooks/python/ ./.git/hooks/
                for file in './.git/hooks'; do
                    if [[ ! "$file" == *".sample"* ]]; then;
                        chmod +x $file
                    fi
                done
            else;
                echo 'Could not find Hooks directory in Git Repository'
            fi
            return
        fi

        if [[ $pyversion == 'cdk' ]]; then;
            echo 'Adding AWS CDK Packages'

            if [[ ! ${VIRTUAL_ENV} ]]; then;
                source ./.venv/bin/activate
            fi

            uv add --active aws-cdk-lib constructs
            uv add --active --dev checkov
            return
        fi

        if [[ $pyversion ]]; then;
            uv python pin $pyversion
        fi

        if [[ ! -f './pyproject.toml' ]]; then;
            echo 'Creating new project'
            uv init --bare            
        fi

        if [[ ! -d './.venv' ]]; then;
            echo 'Setting up Virtual Environment'
            uv venv .venv
            source ./.venv/bin/activate
        else;
            if [[ ! ${VIRTUAL_ENV} ]]; then;
                echo 'Activating Virtual Environment'
                source ./.venv/bin/activate 
            fi
        fi

        if [[ $pipaction == 'install' ]]; then;
                uv sync --all-groups --upgrade
                return
        fi
        uv sync --all-groups --locked
        return
    fi

}